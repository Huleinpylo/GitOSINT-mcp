[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "gitosint-mcp"
version = "0.1.0"
description = "GitOSINT MCP Server - OSINT for Git repositories via Model Context Protocol"
readme = "README.md"
requires-python = ">=3.8"
license = {text = "MIT"}
authors = [
    {name = "Huleinpylo", email = "contact@huleinpylo.dev"}
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Information Technology", 
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Security",
    "Topic :: Internet :: WWW/HTTP :: Indexing/Search",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Networking :: Monitoring"
]
keywords = ["osint", "mcp", "git", "intelligence", "security", "ai-agents"]

dependencies = [
    "mcp>=0.1.0",
    "aiohttp>=3.8.0",
    "pydantic>=2.0.0",
    "click>=8.0.0",
    "structlog>=22.0.0",
    "tenacity>=8.0.0",
    "gitpython>=3.1.0",
    "beautifulsoup4>=4.11.0",
    "requests>=2.28.0"
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "black>=22.0.0",
    "isort>=5.10.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0"
]
ml = [
    "scikit-learn>=1.2.0",
    "pandas>=1.5.0",
    "numpy>=1.24.0",
    "networkx>=3.0.0"
]
all = ["gitosint-mcp[dev,ml]"]

[project.urls]
Homepage = "https://github.com/Huleinpylo/GitOSINT-mcp"
Repository = "https://github.com/Huleinpylo/GitOSINT-mcp.git"
Issues = "https://github.com/Huleinpylo/GitOSINT-mcp/issues"
Documentation = "https://github.com/Huleinpylo/GitOSINT-mcp/wiki"

[project.scripts]
gitosint-mcp = "gitosint_mcp.cli:main"

[tool.setuptools.packages.find]
where = ["src"]

[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
(
  /(
      \.eggs
    | \.git
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | _build
    | buck-out
    | build
    | dist
  )/
)
'''

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
markers = [
    "slow: marks tests as slow (deselect with -m not slow)",
    "integration: marks tests as integration tests",
    "mcp: marks tests as MCP-specific functionality",
    "unit: marks tests as unit tests"
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*.py"
]

[tool.coverage.report]
exclude_also = [
    'def __repr__',
    'if self.debug:',
    'if settings.DEBUG',
    'raise AssertionError',
    'raise NotImplementedError',
    'if 0:',
    'if __name__ == .__main__.:',
    'if TYPE_CHECKING:',
    'class .*\bProtocol\):',
    '@(abc\.)?abstractmethod',
]
[mypy]
disable_error_code = annotation-unchecked
@pytest.fixture
def analyzer(test_config):
    return GitOSINTAnalyzer(test_config)